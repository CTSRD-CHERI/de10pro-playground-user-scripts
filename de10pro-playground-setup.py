#! /usr/bin/env python3

import shutil as sh
import pathlib as p
import contextlib
import types
import logging
import argparse
import datetime

@contextlib.contextmanager
def write_file( filepath
              , func_name
              , func_args
              , shebang=None
              , c='#' ):
  f = open(filepath, mode='w')
  try:
    if shebang:
      f.write(f'{shebang}\n\n')
    f.write(f'{c} file generated by {p.Path(__file__).name}\n')
    f.write(f'{c} (https://github.com/CTSRD-CHERI/de10pro-playground-user-scripts.git)\n')
    f.write(f'{c} {datetime.datetime.now()}\n')
    f.write(f'{c} {func_name} function called with arguments:\n')
    for k, v in func_args.items(): f.write(f'{c} {k} = {v}\n')
    f.write('\n')
    yield f
  finally:
    f.close()

def write_tftp_config( filepath='./conf/tftpd-hpa'
                     , tftp_dir='./tftp'
                     , tftp_user='tftp'
                     , tftp_addr=':69'
                     , tftp_opts=['--secure'] ):
  # capture function arguments for reporting purposes
  args = locals()
  # generate file
  with write_file(filepath, 'write_tftp_config', args) as f:
    f.write(f"""\
TFTP_USERNAME="{tftp_user}"
TFTP_DIRECTORY="{tftp_dir}"
TFTP_ADDRESS="{tftp_addr}"
TFTP_OPTIONS="{" ".join(tftp_opts)}"
""")

def write_nfs_ganesha_config( filepath='./conf/ganesha.conf'
                            , nfs_export_path='./freebsd-aarch64-rootfs'
                            , nfs_export_pseudo='/freebsd-aarch64-rootfs'
                            , nfs_export_clients='192.168.0.10/24' ):
  # capture function arguments for reporting purposes
  args = locals()
  # generate file
  with write_file(filepath, 'write_nfs_ganesha_config', args) as f:
    f.write(f"""\
LOG {{
  Components {{
    ALL = NULL;
  }}
}}
NFS_CORE_PARAM {{
  mount_path_pseudo = true;
}}
EXPORT {{
  Export_id = 12345;
  Path = {nfs_export_path};
  Pseudo = {nfs_export_pseudo};
  Protocols = 3;
  Access_Type = RW;
  #Squash = root_squash;
  #Sectype = sys;
  FSAL {{
    Name = VFS;
  }}
  CLIENT {{
'    Clients = {nfs_export_clients};
    Squash = None;
  }}
}}
""")

def write_payload_runme_sh( filepath='./runme.sh'
                          , conf_dir='./conf'
                          , interactive=False ):
  # capture function arguments for reporting purposes
  args = locals()
  # generate runme script
  with write_file( filepath, 'write_payload_runme_sh', args
                 , '#! /usr/bin/env sh') as f:
    # script body
    content=f"""\
PAYLOADDIR="$( cd -- "$(dirname "$0")" >/dev/null 2>&1 ; pwd -P )"

echo "HPS boot payload"

# setup tftpd configuration
################################################################################
[ -f ${{PAYLOADDIR}}/conf/tftpd-hpa ] || {{ echo "${{PAYLOADDIR}}/conf/tftpd-hpa not found"; exit 1; }}
mount --bind -o ro ${{PAYLOADDIR}}/conf/tftpd-hpa /etc/default/tftpd-hpa
echo "bound mounted ${{PAYLOADDIR}}/conf/tftpd-hpa over /etc/default/tftpd-hpa"
systemctl restart tftpd-hpa.service
echo "restarted tftpd-hpa.service with payload-specific configuration"

# setup freebsd aarch64 rootfs
################################################################################

tar xf $PAYLOADDIR/freebsd-aarch64-rootfs.tar -C $PAYLOADDIR
chmod +x $PAYLOADDIR/riscv-freebsd-boot.sh
mv $PAYLOADDIR/riscv-freebsd-boot.sh $PAYLOADDIR/freebsd-aarch64-rootfs/root/riscv-freebsd-boot/
mv $PAYLOADDIR/virtio.fs $PAYLOADDIR/freebsd-aarch64-rootfs/root/riscv-freebsd-boot/

# setup ganesha configuration
################################################################################

[ -f ${{PAYLOADDIR}}/conf/ganesha.conf ] || {{ echo "${{PAYLOADDIR}}/conf/ganesha.conf not found"; exit 1; }}
mount --bind -o ro ${{PAYLOADDIR}}/conf/ganesha.conf /etc/ganesha/ganesha.conf
echo "bound mounted ${{PAYLOADDIR}}/conf/ganesha.conf over /etc/ganesha/ganesha.conf"
systemctl restart nfs-ganesha.service
echo "restarted nfs-ganesha.service with payload-specific configuration"

# stratix10 boot
################################################################################
QUARTUS_BINDIR=/opt/intelFPGA_pro/23.3/qprogrammer/quartus/bin
QUARTUS_PGM=$QUARTUS_BINDIR/quartus_pgm
($QUARTUS_PGM -m jtag -o P\;${{PAYLOADDIR}}/tftp/fpga.hps.rbf@1 || \\
 $QUARTUS_PGM -m jtag -o P\;${{PAYLOADDIR}}/tftp/fpga.hps.rbf@2) && \\
expect -c 'log_user 1' \\
       -c 'set timeout -1' \\
       -c 'spawn picocom -b 115200 /dev/ttyACM0' \\
"""
    if interactive:
      content += "       -c 'interact'"
    else:
      content += f"""\
       -c 'expect "EXPECT >> HPS >> DONE"' \\
       -c 'exit 0'

sleep 20 # Allow HPS to shutdown
sync

# terminate runme payload script
################################################################################

systemctl stop nfs-ganesha.service
umount /etc/ganesha/ganesha.conf
echo "nfs-ganesha stopped and bound mounted config unmounted"
systemctl stop tftp-hpa.service
umount /etc/default/tftpd-hpa
echo "nfs-ganesha stopped and bound mounted config unmounted"
echo "payload over, shutting down"
shutdown -h now
"""
    f.write(content)

if __name__ == '__main__':

  #parser = argparse.ArgumentParser(description='Run the shape embed pipeline')
  #parser.add_argument(
  #    '-d', '--dataset', nargs=3, metavar=('NAME', 'PATH', 'TYPE')
  #  , help=f"The NAME, PATH and TYPE of the dataset (default: {dflt_params.dataset})")
  #parser.add_argument(
  #    '-o', '--output-dir', metavar='OUTPUT_DIR', default=None
  #  , help=f"The OUTPUT_DIR path to use to dump results")
  #parser.add_argument('-v', '--verbose', action='count', default=0
  #  , help="Increase verbosity level by adding more \"v\".")

  ## parse command line arguments
  #clargs=parser.parse_args()

  ## set verbosity level
  #logger = logging.getLogger()
  #if clargs.verbose > 2:
  #  logger.setLevel(logging.DEBUG)
  #elif clargs.verbose > 0:
  #  logger.setLevel(logging.INFO)

  write_tftp_config('tftp.conf')
  write_nfs_ganesha_config('nfs.conf')
  write_payload_runme_sh('runme.sh')
